import java.sql.*;
import java.util.*;

// Model Class
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }

    public void setName(String name) { this.name = name; }
    public void setDepartment(String department) { this.department = department; }
    public void setMarks(double marks) { this.marks = marks; }

    @Override
    public String toString() {
        return String.format("%-10d %-20s %-15s %-10.2f",
                studentID, name, department, marks);
    }
}

// Controller Class (Handles Database Operations)
class StudentDAO {
    private static final String URL = "jdbc:mysql://localhost:3306/schooldb";
    private static final String USER = "root";
    private static final String PASSWORD = "your_password";
    private Connection conn;

    public StudentDAO() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("‚úÖ Connected to database successfully!");
        } catch (Exception e) {
            System.out.println("‚ùå Database connection failed: " + e.getMessage());
        }
    }

    // CREATE
    public void addStudent(Student s) {
        String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, s.getStudentID());
            ps.setString(2, s.getName());
            ps.setString(3, s.getDepartment());
            ps.setDouble(4, s.getMarks());
            ps.executeUpdate();
            System.out.println("‚úÖ Student added successfully!");
        } catch (SQLException e) {
            System.out.println("‚ùå Error adding student: " + e.getMessage());
        }
    }

    // READ
    public List<Student> getAllStudents() {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM Student";
        try (Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery(sql)) {
            while (rs.next()) {
                list.add(new Student(
                        rs.getInt("StudentID"),
                        rs.getString("Name"),
                        rs.getString("Department"),
                        rs.getDouble("Marks")
                ));
            }
        } catch (SQLException e) {
            System.out.println("‚ùå Error fetching students: " + e.getMessage());
        }
        return list;
    }

    // UPDATE
    public void updateStudent(Student s) {
        String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, s.getName());
            ps.setString(2, s.getDepartment());
            ps.setDouble(3, s.getMarks());
            ps.setInt(4, s.getStudentID());
            int rows = ps.executeUpdate();
            if (rows > 0)
                System.out.println("‚úÖ Student updated successfully!");
            else
                System.out.println("‚ö†Ô∏è No student found with that ID.");
        } catch (SQLException e) {
            System.out.println("‚ùå Error updating student: " + e.getMessage());
        }
    }

    // DELETE
    public void deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            int rows = ps.executeUpdate();
            if (rows > 0)
                System.out.println("‚úÖ Student deleted successfully!");
            else
                System.out.println("‚ö†Ô∏è No student found with that ID.");
        } catch (SQLException e) {
            System.out.println("‚ùå Error deleting student: " + e.getMessage());
        }
    }

    public void close() {
        try {
            if (conn != null) conn.close();
        } catch (SQLException e) {
            System.out.println("‚ùå Error closing connection: " + e.getMessage());
        }
    }
}

// View + Main Application (User Interface)
public class StudentManagementApp {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StudentDAO dao = new StudentDAO();
        int choice;

        do {
            System.out.println("\n===== Student Management Menu =====");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            while (!sc.hasNextInt()) {
                System.out.print("Invalid input. Enter number: ");
                sc.next();
            }
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> {
                    System.out.print("Enter Student ID: ");
                    int id = sc.nextInt();
                    sc.nextLine();
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter Department: ");
                    String dept = sc.nextLine();
                    System.out.print("Enter Marks: ");
                    double marks = sc.nextDouble();
                    dao.addStudent(new Student(id, name, dept, marks));
                }

                case 2 -> {
                    List<Student> students = dao.getAllStudents();
                    System.out.println("\n===== Student Records =====");
                    System.out.printf("%-10s %-20s %-15s %-10s%n", "ID", "Name", "Department", "Marks");
                    System.out.println("-----------------------------------------------------------");
                    for (Student s : students)
                        System.out.println(s);
                }

                case 3 -> {
                    System.out.print("Enter Student ID to update: ");
                    int id = sc.nextInt();
                    sc.nextLine();
                    System.out.print("Enter New Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter New Department: ");
                    String dept = sc.nextLine();
                    System.out.print("Enter New Marks: ");
                    double marks = sc.nextDouble();
                    dao.updateStudent(new Student(id, name, dept, marks));
                }

                case 4 -> {
                    System.out.print("Enter Student ID to delete: ");
                    int id = sc.nextInt();
                    dao.deleteStudent(id);
                }

                case 5 -> {
                    dao.close();
                    System.out.println("üëã Exiting program. Goodbye!");
                }

                default -> System.out.println("‚ö†Ô∏è Invalid choice. Try again.");
            }

        } while (choice != 5);

        sc.close();
    }
}
